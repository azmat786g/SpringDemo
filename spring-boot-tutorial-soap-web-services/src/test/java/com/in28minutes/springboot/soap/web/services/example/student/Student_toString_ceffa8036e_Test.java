/*
Test generated by RoostGPT for test java-web-service using AI Type Open AI and AI Model gpt-4

Test Scenario 1:
Validate that the function returns the correct string when all the fields (id, name, passportNumber) have valid values. 

Test Scenario 2:
Check the function's return value when the 'id' field is null. The function should return the string with null in place of the id.

Test Scenario 3:
Check the function's return value when the 'name' field is null. The function should return the string with null in place of the name.

Test Scenario 4:
Check the function's return value when the 'passportNumber' field is null. The function should return the string with null in place of the passportNumber.

Test Scenario 5:
Validate that the function returns the correct string when two or all fields are null.

Test Scenario 6:
Check the function's return value when the 'id', 'name' and 'passportNumber' fields contain special characters.

Test Scenario 7:
Check the function's return value when the 'id', 'name' and 'passportNumber' fields contain numbers.

Test Scenario 8:
Check the function's return value when the 'id', 'name' and 'passportNumber' fields contain a combination of numbers, special characters, and alphabets.

Test Scenario 9:
Check the function's return value when the 'id', 'name' and 'passportNumber' fields are empty strings.

Test Scenario 10:
Check the function's return value when the 'id', 'name' and 'passportNumber' fields contain long string values to test for any string length limitations.
*/
package com.in28minutes.springboot.soap.web.services.example.student;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class Student_toString_ceffa8036e_Test {

    private Student student;

    @Before
    public void setUp() {
        student = new Student();
    }

    @Test
    public void testToString_allFieldsValid() {
        student.setId(123L);
        student.setName("John");
        student.setPassportNumber("AB123456");
        assertEquals("Student [id=123, name=John, passportNumber=AB123456]", student.toString());
    }

    @Test
    public void testToString_idIsNull() {
        student.setName("John");
        student.setPassportNumber("AB123456");
        assertEquals("Student [id=null, name=John, passportNumber=AB123456]", student.toString());
    }

    @Test
    public void testToString_nameIsNull() {
        student.setId(123L);
        student.setPassportNumber("AB123456");
        assertEquals("Student [id=123, name=null, passportNumber=AB123456]", student.toString());
    }

    @Test
    public void testToString_passportNumberIsNull() {
        student.setId(123L);
        student.setName("John");
        assertEquals("Student [id=123, name=John, passportNumber=null]", student.toString());
    }

    @Test
    public void testToString_allFieldsAreNull() {
        assertEquals("Student [id=null, name=null, passportNumber=null]", student.toString());
    }

    @Test
    public void testToString_allFieldsContainSpecialCharacters() {
        student.setId(123L);
        student.setName("!@#$%^&*()");
        student.setPassportNumber("!@#$%^&*()");
        assertEquals("Student [id=123, name=!@#$%^&*(), passportNumber=!@#$%^&*()]", student.toString());
    }

    @Test
    public void testToString_allFieldsContainNumbers() {
        student.setId(123L);
        student.setName("123456");
        student.setPassportNumber("123456");
        assertEquals("Student [id=123, name=123456, passportNumber=123456]", student.toString());
    }

    @Test
    public void testToString_allFieldsContainMixedCharacters() {
        student.setId(123L);
        student.setName("John123!@#$%");
        student.setPassportNumber("AB123!@#$%");
        assertEquals("Student [id=123, name=John123!@#$%, passportNumber=AB123!@#$%]", student.toString());
    }

    @Test
    public void testToString_allFieldsAreEmptyStrings() {
        student.setId(123L);
        student.setName("");
        student.setPassportNumber("");
        assertEquals("Student [id=123, name=, passportNumber=]", student.toString());
    }

    @Test
    public void testToString_allFieldsAreLongStrings() {
        String longStr = new String(new char[1000]).replace('\0', 'a');
        student.setId(123L);
        student.setName(longStr);
        student.setPassportNumber(longStr);
        assertEquals("Student [id=123, name=" + longStr + ", passportNumber=" + longStr + "]", student.toString());
    }
}
