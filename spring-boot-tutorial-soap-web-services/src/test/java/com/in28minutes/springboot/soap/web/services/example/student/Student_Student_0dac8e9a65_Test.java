/*
Test generated by RoostGPT for test java-web-service using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the Student object is successfully created with valid name and passportNumber inputs.
2. Scenario: Check if the Student object is not created when the name input is null.
3. Scenario: Check if the Student object is not created when the passportNumber input is null.
4. Scenario: Check if the Student object is not created when both the name and passportNumber inputs are null.
5. Scenario: Check if the Student object is successfully created when the name input is an empty string.
6. Scenario: Check if the Student object is successfully created when the passportNumber input is an empty string.
7. Scenario: Check if the Student object is not created when both the name and passportNumber inputs are empty strings.
8. Scenario: Check if the Student object is successfully created when the name input contains special characters or numbers.
9. Scenario: Check if the Student object is successfully created when the passportNumber input contains special characters or letters.
10. Scenario: Check if the Student object is not created when the name input is excessively long (beyond the maximum allowed characters).
11. Scenario: Check if the Student object is not created when the passportNumber input is excessively long (beyond the maximum allowed characters).
12. Scenario: Check if the Student object is not created when the passportNumber input is excessively short (below the minimum required characters).
13. Scenario: Check if the Student object is successfully created when the name input contains whitespace characters (leading, trailing, or in-between).
14. Scenario: Check if the Student object is successfully created when the passportNumber input contains whitespace characters (leading, trailing, or in-between).
*/
package com.in28minutes.springboot.soap.web.services.example.student;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class Student_Student_0dac8e9a65_Test {

    @Test
    public void testStudentConstructorWithValidInputs() {
        Student student = new Student("John Doe", "123456789");
        Assertions.assertEquals("John Doe", student.getName());
        Assertions.assertEquals("123456789", student.getPassportNumber());
    }

    @Test
    public void testStudentConstructorWithNullName() {
        Assertions.assertThrows(NullPointerException.class, () -> {
            new Student(null, "123456789");
        });
    }

    @Test
    public void testStudentConstructorWithNullPassportNumber() {
        Assertions.assertThrows(NullPointerException.class, () -> {
            new Student("John Doe", null);
        });
    }

    @Test
    public void testStudentConstructorWithNullInputs() {
        Assertions.assertThrows(NullPointerException.class, () -> {
            new Student(null, null);
        });
    }

    @Test
    public void testStudentConstructorWithEmptyName() {
        Student student = new Student("", "123456789");
        Assertions.assertEquals("", student.getName());
        Assertions.assertEquals("123456789", student.getPassportNumber());
    }

    @Test
    public void testStudentConstructorWithEmptyPassportNumber() {
        Student student = new Student("John Doe", "");
        Assertions.assertEquals("John Doe", student.getName());
        Assertions.assertEquals("", student.getPassportNumber());
    }

    @Test
    public void testStudentConstructorWithEmptyInputs() {
        Student student = new Student("", "");
        Assertions.assertEquals("", student.getName());
        Assertions.assertEquals("", student.getPassportNumber());
    }

    @Test
    public void testStudentConstructorWithSpecialCharactersInName() {
        Student student = new Student("!@#John^&*()Doe", "123456789");
        Assertions.assertEquals("!@#John^&*()Doe", student.getName());
        Assertions.assertEquals("123456789", student.getPassportNumber());
    }

    @Test
    public void testStudentConstructorWithSpecialCharactersInPassportNumber() {
        Student student = new Student("John Doe", "!@#123^&*()");
        Assertions.assertEquals("John Doe", student.getName());
        Assertions.assertEquals("!@#123^&*()", student.getPassportNumber());
    }

    @Test
    public void testStudentConstructorWithLongName() {
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            new Student("ThisIsAVeryLongNameThatExceedsTheMaximumAllowedCharacters", "123456789");
        });
    }

    @Test
    public void testStudentConstructorWithLongPassportNumber() {
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            new Student("John Doe", "ThisIsAVeryLongPassportNumberThatExceedsTheMaximumAllowedCharacters");
        });
    }

    @Test
    public void testStudentConstructorWithShortPassportNumber() {
        Assertions.assertThrows(IllegalArgumentException.class, () -> {
            new Student("John Doe", "12");
        });
    }

    @Test
    public void testStudentConstructorWithWhitespaceInName() {
        Student student = new Student(" John Doe ", "123456789");
        Assertions.assertEquals(" John Doe ", student.getName());
        Assertions.assertEquals("123456789", student.getPassportNumber());
    }

    @Test
    public void testStudentConstructorWithWhitespaceInPassportNumber() {
        Student student = new Student("John Doe", " 123456789 ");
        Assertions.assertEquals("John Doe", student.getName());
        Assertions.assertEquals(" 123456789 ", student.getPassportNumber());
    }
}
