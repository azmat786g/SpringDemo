/*
Test generated by RoostGPT for test java-web-service using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Valid Input
- Test with a valid id, name, and passport number. It should assign the values to the respective fields of the Student object.

Test Scenario 2: Null Values
- Test with null values in all fields. The Student object should still be created but the fields should be null.

Test Scenario 3: Empty String Values
- Test with empty strings for the name and passport number fields. The Student object should be created and the respective fields should be empty.

Test Scenario 4: Negative Values
- Test with a negative value for the id field. It should still assign the value to the id field of the Student object.

Test Scenario 5: Special Characters or Numbers in Name
- Test with special characters or numbers in the name field. The field should still be assigned the value.

Test Scenario 6: Special Characters in Passport Number
- Test with special characters in the passport number field. The field should still be assigned the value.

Test Scenario 7: Long Strings for Name and Passport Number
- Test with very long strings for the name and passport number fields. It should still assign the values to the respective fields of the Student object.

Test Scenario 8: Null or Negative ID
- Test with a null or negative id. It should still assign the value to the id field of the Student object.

Test Scenario 9: Non-numeric Characters in ID
- Test with non-numeric characters in the id. This is an invalid test as the id is of type Long. 

Test Scenario 10: Non-string Values for Name and Passport Number
- Test with non-string values for name and passport number. These are invalid tests as these fields are of type String. 

Test Scenario 11: Zero as ID
- Test with zero as the id. It should still assign the value to the id field of the Student object.
*/
package com.in28minutes.springboot.soap.web.services.example.student;

import org.junit.Test;
import static org.junit.Assert.*;

public class Student_Student_6583406a35_Test {

    @Test
    public void testValidInput() {
        Student student = new Student(123L, "John Doe", "AB123456");
        assertEquals(Long.valueOf(123), student.getId());
        assertEquals("John Doe", student.getName());
        assertEquals("AB123456", student.getPassportNumber());
    }

    @Test
    public void testNullValues() {
        Student student = new Student(null, null, null);
        assertNull(student.getId());
        assertNull(student.getName());
        assertNull(student.getPassportNumber());
    }

    @Test
    public void testEmptyStringValues() {
        Student student = new Student(123L, "", "");
        assertEquals(Long.valueOf(123), student.getId());
        assertEquals("", student.getName());
        assertEquals("", student.getPassportNumber());
    }

    @Test
    public void testNegativeValues() {
        Student student = new Student(-123L, "John Doe", "AB123456");
        assertEquals(Long.valueOf(-123), student.getId());
        assertEquals("John Doe", student.getName());
        assertEquals("AB123456", student.getPassportNumber());
    }

    @Test
    public void testSpecialCharactersOrNumbersInName() {
        Student student = new Student(123L, "John123@#", "AB123456");
        assertEquals(Long.valueOf(123), student.getId());
        assertEquals("John123@#", student.getName());
        assertEquals("AB123456", student.getPassportNumber());
    }

    @Test
    public void testSpecialCharactersInPassportNumber() {
        Student student = new Student(123L, "John Doe", "AB@#123456");
        assertEquals(Long.valueOf(123), student.getId());
        assertEquals("John Doe", student.getName());
        assertEquals("AB@#123456", student.getPassportNumber());
    }

    @Test
    public void testLongStringsForNameAndPassportNumber() {
        String longString = new String(new char[1000]).replace("\0", "a");
        Student student = new Student(123L, longString, longString);
        assertEquals(Long.valueOf(123), student.getId());
        assertEquals(longString, student.getName());
        assertEquals(longString, student.getPassportNumber());
    }

    @Test
    public void testZeroAsID() {
        Student student = new Student(0L, "John Doe", "AB123456");
        assertEquals(Long.valueOf(0), student.getId());
        assertEquals("John Doe", student.getName());
        assertEquals("AB123456", student.getPassportNumber());
    }
}
